
need scons to use SConstruct

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:
: An odd number under 2^32 (other than 1) is prime if it passes
: an SPRP test using a base selected from this table.
:
: The table has 256 16 bit entries containing SPRP bases.  Select an
: element using a hash of the odd number with:  (#AD625B89 _* N) // 24
:
: The operator "_*" is a 32 bit unsigned multiplication and "//" shifts right.
: This hashing mechanism originated with Steven Worley's 32 bit primality test.
:
:     N    = 480_194_653
:     Hash = #43fb_f0c5 // 24 = #43 = 67
:     Base = 2139
:     SPRP( N, 2139 ) = 1                   (prime)
:
:     N    = 20_074_069                     (7177 * 2797)
:     Hash = #f34e_227d // 24 = #f3 = 243
:     Base = 32374
:     SPRP( N, 32374 ) = 0                  (composite)
:
:* Copyright 2019 Bradley Berg   < (My last name) @ t e c h n e o n . c o m >
:*
:* Permission to use, copy, modify, and distribute this software for any
:* purpose with or without fee is hereby granted, provided that the above
:* copyright notice and this permission notice appear in all copies.
:
: This algorithm is deliberately unpatented. The license above also
: lets you freely use it even in commercial software.
:...............................................................................

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:
: An odd number in the range 2^32 to 2^64 is prime if it passes an SPRP-2 test
: and one or two more SPRP tests using bases in this table.
:
: The table has 16384 16 bit entries designating a pair of bases.  Select an
: element using a hash of the odd number with:  (#AD625B89 _* N) // 18
:
: The operator "_*" is unsigned 32 bit multiplication and "//" shifts right.
: This hashing mechanism originated with Steven Worley's 32 bit primality test.
:
: 2^32 to 2^49:  Pass SPRP-2 and a second SPRP test using the hashed base.
:
: 2^49 to 2^64:  Pass an addition SPRP test using one of 8 bases selected
:                using the upper 3 bits of the hashed base.  These bases are:
:                   0 .. 7 ==> {15, 135, 13, 60, 15, 117, 65, 29}
:
:     N = 871_87753_77449
:     SPRP( N, 2 ) = 1
:     Hash = #d4ee_f6f1 // 18 = #353b = 13627
:     Base = 687
:     SPRP( N, 687 ) = 1                       (prime)
:
:     N = 865_17769_13431                      (555871 * 15564361)
:     SPRP( N, 2 ) = 1
:     Hash = #3d6c_a94f // 18 = #5fb = 3931
:     Base = 767
:     SPRP( N, 767 ) = 0                       (composite)
:
:     N = 3315_29345_21928_21991
:     SPRP( N, 2 ) = 1
:     Hash = #40eda9f // 18 = #103 = 259
:     Base = 8638
:     SPRP( N, 8638 ) = 1
:     Base = Second[ Base // 13 ] = 135
:     SPRP( N, 135 ) = 1                       (prime)
:
:     N = 1152_96599_65919_97761               (619937093 * 1859811277)
:     SPRP( N, 2 ) = 1
:     Hash = #9417_38c9 // 18 = #2505 = 9477
:     Base = 1941
:     SPRP( N, 1941 ) = 1
:     Base = Second[ Base // 13 ] = 15
:     SPRP( N, 15 ) = 0                        (composite)
:
:* Copyright 2018 Bradley Berg   < (My last name) @ t e c h n e o n . c o m >
:*
:* Permission to use, copy, modify, and distribute this software for any
:* purpose with or without fee is hereby granted, provided that the above
:* copyright notice and this permission notice appear in all copies.
:*
:
: This algorithm is deliberately unpatented. The license above also
: lets you even freely use it in commercial code.
:
: Primality testing using a hash table of bases originated with Steven Worley.
:...............................................................................


